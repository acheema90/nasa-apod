{"version":3,"sources":["apodService.js","constants.js","Apod.js","index.js"],"names":["URL","myInit","method","headers","Headers","mode","cache","getApod","myRequest","Request","fetch","then","response","json","getDate","Date","toDateString","Apod","initialState","imgWidth","imgSrc","imgTitle","imgDesc","imgDate","imgCopy","useReducer","state","action","type","data","url","imgSrcHD","hdurl","title","explanation","copyright","dispatch","apod","useRef","useEffect","a","res","init","current","style","width","ref","src","alt","href","min","placeholder","defaultValue","onChange","e","target","value","setWidth","render","document","querySelector"],"mappings":"yMAEMA,EAAG,sDCFc,2CDEd,YAEHC,EAAS,CACdC,OAAQ,MACRC,QAHiB,IAAIC,QAAQ,CAAE,eAAgB,qBAI/CC,KAAM,OACNC,MAAO,WAGO,SAASC,IACvB,IAAIC,EAAY,IAAIC,QAAQT,EAAKC,GACjC,OAAOS,MAAMF,GAAWG,MAAK,SAACC,GAC7B,OAAOA,EAASC,U,UETZC,EAAU,kBAAM,IAAIC,MAAOC,gBA0GlBC,EAxGF,WACZ,IAIMC,EAAe,CACpBC,SAAU,IACVC,OAAQ,GACRC,SAAU,qBACVC,QAAS,2BACTC,QAAST,IACTU,QAAS,sCAXQ,EA0CQC,sBA7BN,SAACC,EAAOC,GAAY,IAC/BC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACd,OAAQD,GACP,IAfyB,qBAgBxB,OAAO,2BACHF,GADJ,IAECN,OAAQS,EAAKC,KAAO,GACpBC,SAAUF,EAAKG,OAAS,GACxBX,SAAUQ,EAAKI,OAAS,sBACxBX,QAASO,EAAKK,aAAe,2BAC7BV,QAASK,EAAKM,WAAa,qCAC3BZ,QAAST,MAEX,IAvBgB,YAwBf,OAAO,2BACHY,GADJ,IAECP,SAAUU,IAEZ,IA3BkB,cA4BjB,OAAO,2BACHH,GADJ,IAECN,OAAQS,IAEV,IAlCsB,kBAmCtB,QACC,OAAOH,KAIwCR,GA1ChC,mBA0CXQ,EA1CW,KA0CJU,EA1CI,KA2CZC,EAAOC,iBAAO,MAmCpB,OA3BAC,qBAAU,YACC,uCAAG,4BAAAC,EAAA,sEACMjC,IADN,OACNkC,EADM,OAGXL,EADGK,EACM,CACRb,KAvDuB,qBAwDvBC,KAAMY,GAGE,CACRb,KA3DoB,oBAkDV,2CAAH,qDAaVc,KACE,IAEHH,qBAAU,WAELb,EAAMP,UAAY,KACrBiB,EAAS,CAAER,KAnEO,cAmEYC,KAAMH,EAAMK,WAEvCM,EAAKM,UACRN,EAAKM,QAAQC,MAAMC,MAAnB,UAA8BnB,EAAMP,SAApC,SAEC,CAACO,EAAMP,SAAUO,EAAMK,SAAUM,IAGnC,6BACC,6DAAmCX,EAAMH,QAAzC,KACA,yBAAKuB,IAAKT,EAAMU,IAAKrB,EAAMN,OAAQ4B,IAAKtB,EAAML,WAC9C,4BACC,uBAAG4B,KAAMvB,EAAMN,QAASM,EAAML,WAE/B,uCAAeK,EAAMF,SACrB,6BACA,8BACC,oDACA,2BACCI,KAAK,SACLsB,IAAI,IACJC,YAAY,sBACZC,aAAc1B,EAAMP,SACpBkC,SAAU,SAACC,GAAD,OAjDG,SAACA,GAEjBlB,EAAS,CAAER,KA5CM,YA4CWC,KAAMyB,EAAEC,OAAOC,QA+CvBC,CAASH,OAG5B,2BACC,gDADD,IACgC5B,EAAMJ,WCrGzCoC,iBAAO,kBAAC,EAAD,MAAUC,SAASC,cAAc,U","file":"static/js/main.64c0589c.chunk.js","sourcesContent":["import { API_KEY } from './constants';\n\nconst URL = `https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&hd=true`;\nconst myHeaders = new Headers({ 'Content-Type': 'application/json' });\nconst myInit = {\n\tmethod: 'GET',\n\theaders: myHeaders,\n\tmode: 'cors',\n\tcache: 'default',\n};\n\nexport default function getApod() {\n\tlet myRequest = new Request(URL, myInit);\n\treturn fetch(myRequest).then((response) => {\n\t\treturn response.json();\n\t});\n}\n","export const API_KEY = 'ikyEHyh0ZmirOWJmwluc9mUKyuTt1NEFiMkoLsgU';\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport getApod from './apodService';\n\nimport './styles.css';\n\nconst getDate = () => new Date().toDateString();\n\nconst Apod = () => {\n\tconst GET_DATA_SUCCEEDED = 'GET_DATA_SUCCEEDED';\n\tconst GET_DATA_FAILED = 'GET_DATA_FAILED';\n\tconst SET_WIDTH = 'SET_WIDTH';\n\tconst SET_IMG_SRC = 'SET_IMG_SRC';\n\tconst initialState = {\n\t\timgWidth: 900,\n\t\timgSrc: '',\n\t\timgTitle: 'No title available',\n\t\timgDesc: 'No Description Available',\n\t\timgDate: getDate(),\n\t\timgCopy: 'No copyright infomration available',\n\t};\n\tconst apodReducer = (state, action) => {\n\t\tconst { type, data } = action;\n\t\tswitch (type) {\n\t\t\tcase GET_DATA_SUCCEEDED:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\timgSrc: data.url || '',\n\t\t\t\t\timgSrcHD: data.hdurl || '',\n\t\t\t\t\timgTitle: data.title || ' No title available',\n\t\t\t\t\timgDesc: data.explanation || 'No Description Available',\n\t\t\t\t\timgCopy: data.copyright || 'No copyright information available',\n\t\t\t\t\timgDate: getDate(),\n\t\t\t\t};\n\t\t\tcase SET_WIDTH:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\timgWidth: data,\n\t\t\t\t};\n\t\t\tcase SET_IMG_SRC:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\timgSrc: data,\n\t\t\t\t};\n\t\t\tcase GET_DATA_FAILED:\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n\t};\n\n\tconst [state, dispatch] = useReducer(apodReducer, initialState);\n\tconst apod = useRef(null);\n\t// set dynamic image width\n\tconst setWidth = (e) => {\n\t\t// change width on input\n\t\tdispatch({ type: SET_WIDTH, data: e.target.value });\n\t};\n\n\t// make the apod request and set state\n\tuseEffect(() => {\n\t\tconst init = async () => {\n\t\t\tconst res = await getApod();\n\t\t\tif (res) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: GET_DATA_SUCCEEDED,\n\t\t\t\t\tdata: res,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: GET_DATA_FAILED,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tinit();\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// if width more than 1000px use hdurl as src\n\t\tif (state.imgWidth >= 1000) {\n\t\t\tdispatch({ type: SET_IMG_SRC, data: state.imgSrcHD });\n\t\t}\n\t\tif (apod.current) {\n\t\t\tapod.current.style.width = `${state.imgWidth}px`;\n\t\t}\n\t}, [state.imgWidth, state.imgSrcHD, apod]);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Astronomy Picture of the Day ({state.imgDate})</h1>\n\t\t\t<img ref={apod} src={state.imgSrc} alt={state.imgTitle} />\n\t\t\t<h2>\n\t\t\t\t<a href={state.imgSrc}>{state.imgTitle}</a>\n\t\t\t</h2>\n\t\t\t<small>&copy; {state.imgCopy}</small>\n\t\t\t<br />\n\t\t\t<span>\n\t\t\t\t<strong>Set Image Width:</strong>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tplaceholder=\"enter a pixel value\"\n\t\t\t\t\tdefaultValue={state.imgWidth}\n\t\t\t\t\tonChange={(e) => setWidth(e)}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<p>\n\t\t\t\t<strong>Explanation:</strong> {state.imgDesc}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport default Apod;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Apod from './Apod.js';\n\nrender(<Apod />, document.querySelector('#app'));\n"],"sourceRoot":""}